// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Instruction = 0 or ALU output = 1 at instruction[15]
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=p);

    // A register has control bit from instruction[5] when it is a c instruction
    Not(in=instruction[15], out=aInstruction);
    Or(a=aInstruction, b=instruction[5], out=loadA);
    ARegister(in=p, load=loadA, out=outA, out[0..14]=addressM);

    // D register has control bit from instruction[4], load only when it is a c instruction
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=outD);

    // Mux the A register and the value at A, which is M. Do this with the bit at index 12.
    Mux16(a=outA, b=inM, sel=instruction[12], out=q);

    ALU(x=outD, y=q, zx=instruction[11], nx=instruction[10], zy=instruction[9], 
    ny=instruction[8], f=instruction[7], no=instruction[6], zr=outzr, ng=outng, out=aluComp);

    // Mux either an a-instruction or a c-instruction
    Mux16(a=outA, b=aluComp, sel=instruction[15], out=aluOut, out=outM);

    // WriteM, if bit 4 and the opcode are 1, then write
    And(a=instruction[3], b=instruction[15], out=writeM);

    // PC
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

    And(a=false, b=false, out=loadNull);
    And(a=notzr, b=notng, out=loadJGT);
    And(a=zr, b=zr, out=loadJEQ);
    And(a=notng, b=notng, out=loadJGE);
    And(a=ng, b=ng, out=loadJLT);
    And(a=notzr, b=notzr, out=loadJNE);
    Or(a=zr, b=ng, out=loadJLE);
    And(a=true, b=true, out=loadJMP);

    Mux(a=loadNull, b=loadJGT, sel=instruction[0], out=m1);
    

    Mux8Way(a=loadNull, b=loadJGT, c=loadJEQ, d=loadJGE, e=loadJLT, f=loadJNE, g=loadJLE, h=loadJMP, sel=instruction[0..2], out=loadPC);

    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}
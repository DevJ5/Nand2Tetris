// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

CHIP Screen {
    IN  in[16],    // what to write
    load,          // write-enable bit
    address[13];   // where to read/write
    OUT out[16];   // Screen value at the given address

CHIP Keyboard {
    OUT out[16]; 
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // If the MSB is 0, that means it is destined for RAM16K, so we set the loadbit if load is set
    Not(in=address[14], out=p);
    And(a=p, b=load, out=loadram);
    RAM16K(in=in, load=loadram, address=address[0..13] , out=ram16);

    // Check if it is screen, i.e. MSB is 1 and bit before is 0
    Not(in=address[13], out=q);
    And(a=address[14], b=q, out=isscreen);

    // If it is the screen and the load is set then we set load for screen
    And(a=isscreen, b=load, out=loadscreen);
    Screen(in=in, load=loadscreen, address=address[0..12], out=screen16);

    // Get the output of the keyboard
    Keyboard(out=kb);

    // If 00 -> ram16, 01 -> ram16, 10 -> screen16, 11 -> kb
    Mux4Way16(a=ram16, b=ram16, c=screen16, d=kb, sel=address[13..14], out=out);

    // addr 8192  "010000000000000".length == 15
    // addr 16383 "011111111111111".length == 15    => last RAM address
    // addr 16384 "100000000000000".length == 15    => first screen address
    // addr 24575 "101111111111111".length == 15    => last screen address
    // addr 24576 "110000000000000".length == 15    => keyboard address
}
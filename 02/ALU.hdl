// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant                         Add16(a=false, b=false, out=x0);
// if (nx == 1) set x = !x       // bitwise not                             Not16(in=x, out=notx);
// if (zy == 1) set y = 0        // 16-bit constant                         Add16(a=false, b=false, out=y0);
// if (ny == 1) set y = !y       // bitwise not                             Not16(in=y, out=noty);
// if (f == 1)  set out = x + y  // integer 2's complement addition         Add16(a=x, b=y, out=xPlusy);
// if (f == 0)  set out = x & y  // bitwise and                             And16(a=x, b=y, out=xAndY);
// if (no == 1) set out = !out   // bitwise not                             Not16(in=xPlusy or xAndY, out=out);
// if (out == 0) set zr = 1                                                 
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // zx:
    Broadcast16(in=zx, out=zx16);
    Not16(in=zx16, out=notzx16);
    And16(a=x, b=notzx16, out=x1);

    // nx:
    Broadcast16(in=nx, out=nx16);
    Xor16(a=x1, b=nx16, out=x2);

    // zy:
    Broadcast16(in=zy, out=zy16);
    Not16(in=zy16, out=notzy16);
    And16(a=y, b=notzy16, out=y1);

    // ny:
    Broadcast16(in=ny, out=ny16);
    Xor16(a=y1, b=ny16, out=y2);

    // f:
    Broadcast16(in=f, out=f16);
    Add16(a=x2, b=y2, out=xOry);
    And16(a=xOry, b=f16, out=xOryAndf);

    And16(a=x2, b=y2, out=xAndy);
    Not16(in=f16, out=notf16);
    And16(a=xAndy, b=notf16, out=xAndyAndNotf);

    Or16(a=xOryAndf, b=xAndyAndNotf, out=f1);

    // no:
    Broadcast16(in=no, out=no16);
    Xor16(a=f1, b=no16, out=rr);

    // zr:
    Not16(in=rr, out=qq);
    Shrink16(in=qq, out=zr);
    
    // ng:
    Add16(a=rr, b=false, out[15]=ng);

    // out:
    Add16(a=rr, b=false, out=out);

}